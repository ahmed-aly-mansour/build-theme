---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Frontend Guideline Document

This document outlines the frontend architecture, design principles, and technologies used in our developer-centric Shopify theme project. It is intended to provide clarity on our approaches and ensure that the theme is clean, maintainable, and easy to customize.

## Frontend Architecture

Our Shopify theme is built with a clean architecture in mind. Here’s how it is structured:

*   **Templating and Markup:** We use Shopify's templating language, Liquid, to render dynamic content in our HTML files. This allows us to neatly separate static structure from dynamic content.
*   **Behavior and Interactivity:** JavaScript is used to enhance the interactivity within the theme. The project leverages pure JavaScript along with custom web components to encapsulate functionality and promote reusability.
*   **State Management:** Alpine.js is incorporated to manage UI state and handle DOM interactions without heavy frameworks. The Liquid AJAX Cart is used to manage cart functionalities, ensuring real-time updates on cart activities.
*   **Modern Workflow:** We utilize Shopify CLI 3.0 and Online Store 2.0 features, supporting a modern development and deployment process while keeping dependencies to a minimum.

This architecture supports scalability by keeping components separated and easily extensible. Maintainability is ensured through clear naming conventions and structured file organization, while performance is boosted by a lean code base and minimal dependencies.

## Design Principles

The key design principles driving our frontend development include:

*   **Clean and Uncluttered Interface:** We focus on simplicity to ensure the end-user gets a clean initial interface with clear navigation.
*   **Usability:** Every element is designed to be intuitive and easy to interact with, emphasizing smooth workflows such as real-time updates for product selections and cart management.
*   **Accessibility:** We follow accessible design guidelines to support a wide range of users, ensuring that interactive elements are navigable and understandable.
*   **Responsiveness:** The design adapts seamlessly across devices, from desktop to mobile, ensuring a consistent experience on different screen sizes.
*   **Performance Focus:** By reducing dependencies and leveraging lightweight technologies, the theme ensures that pages load quickly and interactions remain snappy.

These principles manifest across our components by ensuring dynamic elements (like product variant updates and interactive cart management) are both responsive and accessible.

## Styling and Theming

Our styling approach is a crucial part of promoting a consistent look and feel throughout the theme:

*   **CSS Methodology:** The theme uses plain CSS with clear organization across files. We follow a structured naming convention similar to BEM to maintain clarity without overcomplicating the development process.

*   **No Complex Build Tools:** In keeping with our goal of minimal dependencies, there are no build tools required. All CSS is written directly, ensuring that developers can make changes without a compilation step.

*   **Theming and Design Style:** The visual identity of the theme opts for a modern, flat design with hints of subtle animation. We might incorporate elements such as smooth scroll-triggered and hover animations to enhance the experience without detracting from the simplicity.

*   **Color Palette:** To maintain visual consistency, we suggest the following color palette:

    *   Primary: #0D6EFD (vibrant blue)
    *   Secondary: #6C757D (neutral gray)
    *   Success: #198754 (green for success messages)
    *   Info: #0DCAF0 (light blue for informational cues)
    *   Warning: #FFC107 (amber for warnings)
    *   Danger: #DC3545 (red for errors)
    *   Background and Neutral: #F8F9FA (light gray) and #FFFFFF (white)

*   **Typography:** The recommended font is a modern, clean sans-serif such as 'Roboto' or 'Inter', known for readability on various devices. Fallbacks include system fonts to ensure consistency across platforms.

## Component Structure

The theme leverages a component-based architecture to enhance maintainability and reusability:

*   **Liquid Sections & Blocks:** The theme's layout is broken down into Liquid sections, such as the header, product, collection, and cart areas. Each section is responsible for a specific part of the page.
*   **Custom Web Components:** Encapsulated JavaScript components are used for features like filtering, pagination, and interactive elements (e.g., search interfaces, variant selections). These components are self-contained, making them easy to reuse and update.
*   **Organization:** Files are organized in a manner that separates concerns. Components are grouped by functionality and page type, ensuring a clear structure that is easily navigable for developers.

This component-based approach is central to promoting a maintainable codebase that scales as new features are added.

## State Management

Managing state effectively is essential for smooth user interactions:

*   **Alpine.js:** We use Alpine.js for local state management. It handles UI state changes with minimal overhead and integrates directly into our HTML, which aligns with our minimal dependency philosophy.
*   **Custom Events:** Events like `item-added-to-cart` are used to synchronize state across components. This ensures that, for example, the cart drawer and product pages are updated in real time without full page reloads.
*   **Liquid AJAX Cart:** State related to cart management is handled through Liquid AJAX Cart, facilitating seamless form submissions and error handling on cart pages.

Together, these approaches ensure that UI state is consistent and that updates happen in real time, providing a smooth user experience.

## Routing and Navigation

Navigation within the theme follows Shopify’s page-based approach:

*   **Page Routing:** Since Shopify themes are based on Liquid templates, navigation is handled via standard Shopify URL routing. Each page (home, product, collection, cart) uses its specific template for rendering.
*   **Section Rendering API:** This API is utilized to update parts of a page dynamically, such as updating product variants or filtering collections on the fly, without requiring a full page reload.
*   **Site Navigation:** The header includes elements like a live search powered by Alpine.js and real-time cart updates using the Liquid AJAX Cart. This offers intuitive navigation between major sections of the site.

## Performance Optimization

Performance is a key focus of our theme. The strategies include:

*   **Minimal Dependencies:** By keeping the number of libraries to a minimum, we ensure that the theme remains lightweight and performant.
*   **Lazy Loading & Code Splitting:** Certain assets, especially images in the product galleries (managed by Swiper), are optimized through lazy loading so that they only load when needed. Additionally, where feasible, code splitting allows for faster initial load times.
*   **Efficient DOM Updates:** Using Alpine.js and custom web components ensures that only the necessary parts of the DOM are updated on interaction, reducing unnecessary reflows and repaints.

Collectively, these optimizations lead to a faster, more efficient user experience, crucial for modern e-commerce performance.

## Testing and Quality Assurance

Even with a focus on minimal tools and dependencies, testing remains integral to ensuring a robust theme:

*   **Unit and Integration Testing:** Components and JavaScript logic can be unit tested using frameworks such as Jest. We recommend small, isolated tests to ensure each component works as expected.
*   **End-to-End Testing:** For full user flows (like adding a product to the cart and updating the UI), tools like Cypress are well-suited to automate testing across different pages and interactions.
*   **Manual Testing:** Given the visual nature of the theme, a thorough round of manual testing across browsers and devices is essential. This ensures that design principles such as responsiveness and accessibility are consistently met.
*   **Documentation and Developer Feedback:** Comprehensive documentation (as provided in sections like this) along with clear event conventions (like `item-added-to-cart`) helps maintain quality over the long term.

## Conclusion and Overall Frontend Summary

Our frontend guidelines ensure that the Shopify theme remains clean, scalable, and maintainable. With a focus on a minimalistic and performance-oriented design, our approach makes it easy for developers to customize and extend the theme while delivering a seamless user experience. Key highlights include:

*   A clean, component-based architecture using Liquid, JavaScript, and custom web components.
*   A design philosophy anchored in usability, accessibility, and responsiveness.
*   A styling and theming approach that uses modern, flat design aesthetics with a specified color palette and typography.
*   Lightweight state management and performance optimizations that contribute to a quick and smooth user interface.
*   Established testing protocols to guarantee quality and reliability.

This complete guideline provides a clear roadmap for anyone working on or customizing the Shopify theme, encapsulating all necessary details without overwhelming technical language. The project’s unique focus on zero build tools along with modern development practices sets it apart, providing a strong foundation for future enhancements and integrations.

Feel free to refer back to this document as you work through various facets of the project to ensure consistency with our standards and practices.
