---
description: Apply these rules when making changes to the project
globs:
alwaysApply: true
---

Update this rule if user requested changes to the project requirement, etc.
# Project Requirements Document

## 1. Project Overview

The Base Shopify Theme is a developer-friendly theme designed to offer a clean, organized, and easily customizable starting point for Shopify projects. It is built with modern tools and a minimalistic approach, keeping external dependencies low while maximizing performance and maintainability. With a focus on a clean code architecture and clear component separation, the theme leverages Shopify CLI 3.0 and Online Store 2.0 features to provide a modern workflow for developers, ensuring they can quickly set up and extend the theme without heavy build tools.

This theme is being built to solve the common challenges developers face with cluttered codebases and complex dependencies that slow down development time. The key objectives are to simplify customization through well-documented sections and blocks, enhance user experience with dynamic interactions (like filtering, sorting, and pagination on collection pages), and manage shopping cart operations seamlessly with real-time updates. Success will be measured by the ease of onboarding for developers, smooth site interactions for end users, and reduced overhead when deploying and maintaining Shopify stores.

## 2. In-Scope vs. Out-of-Scope

### In-Scope

*   **Clean Architecture & Organized File Structure:** A well-defined directory and component separation to enhance maintainability.
*   **Minimal Dependencies:** Use only essential libraries such as Alpine.js for UI state management and Liquid AJAX Cart for cart functionality.
*   **Modern Development Tools:** Integration with Shopify CLI 3.0 and full support for Online Store 2.0 features.
*   **Custom Web Components & Pure JavaScript/CSS:** Implementation of JavaScript components without complicated build tools.
*   **Header Interactions:** A responsive header with search functionality and real-time cart updates.
*   **Product Page Functionality:** Dynamic variant selection, detailed product information updates, and AJAX-powered add-to-cart functionality.
*   **Collection Page Enhancements:** Filtering, sorting, and pagination handled through event listeners and URL parameter updates.
*   **Cart Page & Drawer Management:** Real-time cart updates, error handling, and reactive cart drawer behavior enhanced with Alpine.js.
*   **Animations & Visual Feedback:** Implementing hover and scroll-triggered animations to improve user engagement.

### Out-of-Scope

*   Advanced third-party integrations beyond the essential libraries (e.g., not including extra payment gateway integrations beyond the basic Liquid AJAX Cart).
*   Server-side processing or heavy back-end customizations, as the theme is primarily front-end oriented.
*   Complex build tool configurations or automation processes since the project relies on pure JavaScript and CSS.
*   Custom solutions for customer account management beyond the basic login, registration, and account settings interface.
*   Additional marketing or tracking scripts, which are expected to be integrated later as needed.

## 3. User Flow

When a user first installs and launches the Base Shopify Theme, they are greeted by a clean and uncluttered interface that highlights the essential navigation elements and content areas. The initial setup screen ensures that all necessary assets and scripts (such as Alpine.js and Liquid AJAX Cart) are loaded efficiently to provide a smooth experience. The user sees a streamlined layout, with a prominent header featuring a search bar and a dynamic cart bubble reflecting real-time information, which signals that the theme is ready for an engaging shopping experience.

Once on any page, the interaction is highly intuitive. For example, on a product page, when a user selects a variant, the site dynamically updates product details like price, SKU, and inventory without a full page reload. As users interact with filters on the collection pages or adjust cart contents on the cart page, the changes are processed smoothly through AJAX updates. Throughout the journey, custom events and reactive updates ensure that key actions like adding to cart or navigating between product details and collections are both immediate and visually engaging.

## 4. Core Features

*   **Clean Architecture:** Structured file system ensuring clear separation of concerns for maintainability.
*   **Minimal Dependencies:** Uses only essential libraries (e.g., Alpine.js, Liquid AJAX Cart) to maintain performance.
*   **Modern Development Workflow:** Built with Shopify CLI 3.0 and adhering to Online Store 2.0 standards.
*   **Simplified Customization:** Well-documented sections and blocks for easy theme setup and modifications.
*   **Custom Web Components:** Encapsulated components using pure JavaScript and CSS to avoid reliance on complex build tools.
*   **Dynamic Product Page Interactions:** Variant selector and AJAX updates to refresh product details without reloading pages.
*   **Collection Page Enhancements:** Real-time filtering, sorting, and pagination via event listeners and URL updates.
*   **Cart Management & Drawer:** Real-time cart updates, error handling, and reactive drawer state management using Alpine.js.
*   **Animations & Visual Feedback:** Hover and scroll-triggered animations to enhance user interaction and overall aesthetic.

## 5. Tech Stack & Tools

*   **Frontend Frameworks & Languages:**

    *   Shopify Liquid (templating language specific to Shopify).
    *   JavaScript (for client-side interactivity and custom web components).
    *   CSS (for styling and layout).

*   **Libraries & Tools:**

    *   Alpine.js for UI state management and DOM manipulation.
    *   Liquid AJAX Cart for dynamic cart updates and interactions.
    *   Swiper for mobile touch slider functionality in image galleries.
    *   Shopify CLI 3.0 for theme development and deployment.
    *   Online Store 2.0 architecture as the foundation of the theme.

*   **Additional Components:**

    *   Custom Web Components for encapsulating specific functionalities without heavy frameworks.

*   **Development Tools:**

    *   Cursor for advanced IDE suggestions and real-time coding assistance.
    *   Claude 3.7 Sonnet for reasoning and model integrations during development.

## 6. Non-Functional Requirements

*   **Performance:**

    *   The theme should load quickly and efficiently. Critical interactions (e.g., AJAX updates on cart and product pages) must occur with minimal latency.

*   **Security:**

    *   Ensure that no sensitive data is exposed in the frontend code. Use best practices for handling AJAX requests and error management.

*   **Compliance & Standards:**

    *   Adhere to Shopify’s theme development guidelines and accessibility standards.

*   **Usability:**

    *   The interface should be intuitive, with easily navigable components and clear visual feedback on user interactions.

*   **Maintainability:**

    *   Code must be clearly commented and organized so future developers can easily extend or modify functionality. Regular refactoring should be straightforward due to the clean architecture.

## 7. Constraints & Assumptions

*   **Constraints:**

    *   The theme is built exclusively using Shopify Liquid, JavaScript, CSS, and minimal libraries (Alpine.js, Liquid AJAX Cart, and Swiper), without complex build tools.
    *   The development process relies on Shopify CLI 3.0 and conforms to the Online Store 2.0 framework.
    *   Performance must be prioritized, so any third-party integrations are limited to those that do not add unnecessary bloat.

*   **Assumptions:**

    *   Developers using the theme have basic familiarity with Shopify’s Liquid templating system and front-end development.
    *   The project assumes stable availability and compatibility of essential libraries and tools (e.g., Alpine.js and Liquid AJAX Cart).
    *   The theme will primarily serve as a base and isn’t expected to include every possible e-commerce feature out-of-the-box; extra features can be added over time.

## 8. Known Issues & Potential Pitfalls

*   **API Rate Limits:**

    *   When using Shopify’s Section Rendering API for dynamic updates, be aware of potential rate limits. To mitigate this, implement efficient event handling and caching mechanisms where possible.

*   **Platform Restrictions:**

    *   As the theme strictly relies on Shopify’s Online Store 2.0 and Liquid, there may be limitations when trying to integrate with non-Shopify services or external APIs. Clear documentation and scope definition can help avoid such issues.

*   **Performance Bottlenecks:**

    *   Although dependencies are minimal, improper use of AJAX calls or Alpine.js event handlers could lead to slower response times. It is important to profile the theme regularly and optimize code paths.

*   **Browser Compatibility:**

    *   Ensure custom web components, CSS, and JavaScript work across all major browsers. Testing on different platforms early on can help catch compatibility issues.

*   **Error Handling:**

    *   The cart management system handles updates and error management at the item level. Developers should ensure robust error capturing and user feedback to manage any AJAX call failures effectively.

This PRD serves as the foundational document for generating subsequent technical documents. It clearly outlines every aspect of the project, minimizing any ambiguity for AI-assisted development and further documentation.
